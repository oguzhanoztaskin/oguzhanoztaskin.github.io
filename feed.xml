<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://oguzhanstech.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://oguzhanstech.com/" rel="alternate" type="text/html" /><updated>2025-09-13T17:14:00+00:00</updated><id>https://oguzhanstech.com/feed.xml</id><title type="html">Oguzhan’s Tech</title><subtitle>A blog about my hustles, which are mostly about cryptography, cyber security, or software projects.</subtitle><entry><title type="html">SSL Pinning Bypass: Network Security Config</title><link href="https://oguzhanstech.com/2025/08/25/ssl-pinning-bypass-network-security-config.html" rel="alternate" type="text/html" title="SSL Pinning Bypass: Network Security Config" /><published>2025-08-25T00:00:00+00:00</published><updated>2025-08-25T00:00:00+00:00</updated><id>https://oguzhanstech.com/2025/08/25/ssl-pinning-bypass-network-security-config</id><content type="html" xml:base="https://oguzhanstech.com/2025/08/25/ssl-pinning-bypass-network-security-config.html"><![CDATA[<p>In this post, I will talk about how I bypassed the simplest SSL pinning method: <a href="https://developer.android.com/privacy-and-security/security-config">Network Security Config</a> via APK resource editing. I will also explain my setup.</p>

<p>I assume you know how to use the tools mitmproxy, an Android proxy client, apktool, adb and do not detail it here.</p>

<h2 id="why-do-this-at-all">Why Do This At All?</h2>
<p>SSL Pinning protects your apps their network protocols revealed. Though it is a client side protection and you should focus on server side for the most part, it is still relevant: This will slow down anyone that wants to learn your API, bot it or cheat it.</p>

<p>Studying SSL pinning bypasses is both a fun technical challenge and a way to better understand app defenses. My personal goal here is to observe app traffic directly in mitmproxy, while learning how different protections work.</p>

<h2 id="bypassing-network-security-config">Bypassing Network Security Config</h2>
<p>Bypassing Network Security Config was simple:</p>
<ul>
  <li>Decompile the APK with <a href="https://apktool.org/">apktool</a></li>
  <li>Find the name of the config from <code class="language-plaintext highlighter-rouge">AndroidManifest.xml</code> in the <code class="language-plaintext highlighter-rouge">application</code> tag as the value of <code class="language-plaintext highlighter-rouge">android:networkSecurityConfig</code>, usually it is <code class="language-plaintext highlighter-rouge">res/xml/network_security_config.xml</code></li>
  <li>then set it to be:</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;network-security-config&gt;</span>
    <span class="nt">&lt;base-config</span> <span class="na">cleartextTrafficPermitted=</span><span class="s">"false"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;trust-anchors&gt;</span>
            <span class="nt">&lt;certificates</span> <span class="na">src=</span><span class="s">"system"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;certificates</span> <span class="na">src=</span><span class="s">"user"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/trust-anchors&gt;</span>
    <span class="nt">&lt;/base-config&gt;</span>
<span class="nt">&lt;/network-security-config&gt;</span>
</code></pre></div></div>
<p>This will make it trust installed certificates - including the <a href="https://www.mitmproxy.org/">mitmproxy</a>’s certificate if installed. Also if there was any certificate pinned this way, we effectively erased it.<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup></p>

<p>We can see that the default setting is to only trust system certificates and no cleartext traffic, for API level 28 and higher according to <a href="https://developer.android.com/privacy-and-security/security-config">here</a>. Therefore, adding user certificates as a trust anchor is necessary.</p>

<p>After this, we can build and sign the app and install it on the target device. Next, we need to put the app’s network traffic through mitmproxy to observe it.</p>

<h2 id="setting-up-the-proxy">Setting up the Proxy</h2>
<p>We need to run mitmproxy on the host and configure the target device to use it. However, the host and the target device possibly lie on different networks and cannot see each other. We cannot make the target device connect to mitmproxy then. I assume a USB connection to the target device is present, so I will use adb to make the devices connect. In the next subsection I explain how.</p>

<h3 id="a-note-on-adb-port-forwarding">A Note on ADB Port Forwarding</h3>
<p>ADB has two useful commands for port forwarding, the second one is something I wish I had seen sooner<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>. Here I detail them:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb forward tcp:7777 tcp:8888
</code></pre></div></div>
<p>This forwards the port 7777 on the host (i.e. the device running adb, your computer) to the port 8888 on the target device (i.e. your mobile which is connected using a USB cable maybe). What this means is, any connection to port 7777 on your host will be directed to the port 8888 on your target device. For example, if you have an HTTP server listening on port 8888 on your target device, you can access it on your computer via <code class="language-plaintext highlighter-rouge">localhost:7777</code>.</p>

<p>The other command I wish I had learned sooner is the <code class="language-plaintext highlighter-rouge">adb reverse</code> command.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb reverse tcp:3333 tcp:4444
</code></pre></div></div>
<p>This does the opposite of the <code class="language-plaintext highlighter-rouge">adb forward</code> command as the name suggests: The port 3333 on the target device is forwarded to the port 4444 on the host device. That is, if you host the HTTP server on your host at 4444, you can access it on your mobile via <code class="language-plaintext highlighter-rouge">localhost:3333</code>.</p>

<p>Mitmproxy listens at 8080 by default, so we are going to do</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb reverse tcp:8080 tcp:8080
</code></pre></div></div>
<p>Now we can run a http proxy app on the target device and connect it to <code class="language-plaintext highlighter-rouge">127.0.0.1:8080</code> so that it connects to the mitmproxy. Then you should be able to see the network traffic.</p>

<h2 id="conclusion">Conclusion</h2>
<p>We saw how easy it is to bypass the Network Security Config. All we needed to do was decompile, change an XML file, and recompile. To defend against modification of the APK, one can harden their APK using special tools that make apktool fail.</p>

<p><strong>Disclaimer:</strong> This post is intended solely for educational and research purposes. The techniques described here should only be applied to applications you own or have explicit permission to analyze. Reverse engineering, modifying, or intercepting traffic of third-party apps without consent may violate their terms of service and applicable laws. I do not encourage or condone using these methods against third-party apps without permission.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>Actually I used a script for this and it did not remove the domain-configs and pin-sets, it just added this base-config after them. I thought bypass would fail because pin-set tags would override the base-config, yet it works. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>https://android.googlesource.com/platform/packages/modules/adb/+/refs/heads/master/docs/user/adb.1.md <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="android" /><category term="security" /><category term="ssl-pinning" /><category term="mitmproxy" /><summary type="html"><![CDATA[In this post, I will talk about how I bypassed the simplest SSL pinning method: Network Security Config via APK resource editing. I will also explain my setup.]]></summary></entry><entry><title type="html">SSL Pinning Bypass: SSLContext</title><link href="https://oguzhanstech.com/2025/08/25/ssl-pinning-bypass-sslcontext.html" rel="alternate" type="text/html" title="SSL Pinning Bypass: SSLContext" /><published>2025-08-25T00:00:00+00:00</published><updated>2025-08-25T00:00:00+00:00</updated><id>https://oguzhanstech.com/2025/08/25/ssl-pinning-bypass-sslcontext</id><content type="html" xml:base="https://oguzhanstech.com/2025/08/25/ssl-pinning-bypass-sslcontext.html"><![CDATA[<p>In this post, I will explain how to bypass SSL Pinning with <a href="https://developer.android.com/reference/javax/net/ssl/SSLContext">SSLContext</a> using <a href="https://frida.re/">Frida</a>.</p>

<p>As the injection method, I use dylib injection for the reasons I explain below.</p>

<h2 id="split-apks">Split APKs</h2>
<p>Nowadays most apps are split APKs, meaning that they are split into different parts: A main APK that contains .dex files and most resources, one for native libraries (config.arm64_v8a.apk), one for each language the app supports (config.en.apk), one for graphics (config.mdpi.apk) etc. Furthermore, sometimes apktool fails on decompiling/recompiling the main APK and in such cases dylib injection is useful. This is because we do not have to change main APK at all (just resign it with our key), we only have to inject the Frida gadget into a library which lies in <code class="language-plaintext highlighter-rouge">config.&lt;arch&gt;.apk</code>.</p>

<h2 id="injecting-frida-into-a-library">Injecting Frida into a library</h2>
<p>First, we decompile <code class="language-plaintext highlighter-rouge">config.&lt;arch&gt;.apk</code> that contains the libraries. Then we will find a library that is loaded first, like <code class="language-plaintext highlighter-rouge">libreact_render_core.so</code> or anything else that might work. Then we will use the following script to inject the Frida gadget <code class="language-plaintext highlighter-rouge">libfrida-gadget.so</code> into it.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">lief</span><span class="p">,</span> <span class="n">sys</span>

<span class="n">target</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span>
<span class="n">libnative</span> <span class="o">=</span> <span class="n">lief</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
<span class="n">libnative</span><span class="p">.</span><span class="nf">add_library</span><span class="p">(</span><span class="sh">"</span><span class="s">libfrida-gadget.so</span><span class="sh">"</span><span class="p">)</span>
<span class="n">libnative</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</code></pre></div></div>
<p>This adds <code class="language-plaintext highlighter-rouge">libfrida-gadget.so</code> to the ELF’s dynamic section so that our gadget is loaded alongside the target library<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. You can check this with the <code class="language-plaintext highlighter-rouge">readelf</code> command:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>readelf <span class="nt">-d</span> libreact_render_core.so 

Dynamic section at offset 0x22000 contains 43 entries:
  Tag        Type                         Name/Value
 0x00000001 <span class="o">(</span>NEEDED<span class="o">)</span>                     Shared library: <span class="o">[</span>libfrida.so]
 0x00000001 <span class="o">(</span>NEEDED<span class="o">)</span>                     Shared library: <span class="o">[</span>libjsi.so]
 0x00000001 <span class="o">(</span>NEEDED<span class="o">)</span>                     Shared library: <span class="o">[</span>liblogger.so]
 0x00000001 <span class="o">(</span>NEEDED<span class="o">)</span>                     Shared library: <span class="o">[</span>libreact_config.so]
...
</code></pre></div></div>
<p>This is explained in a much better detail at <a href="https://lief.re/doc/stable/tutorials/09_frida_lief.html">here</a>.</p>

<p>Once the Frida gadget works (the app freezes until I connect to it on startup), I ran the following command, <a href="/2025/08/25/ssl-pinning-bypass-network-security-config.html#a-note-on-adb-port-forwarding">explained more detailed here</a>:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb forward tcp:27042 tcp:27042
</code></pre></div></div>
<p>This forwards the port 27042 on my computer to the same port on my mobile, where Frida gadget listens by default. I can then connect to the Frida gadget via <code class="language-plaintext highlighter-rouge">frida -R gadget -l ssl.js</code> and let the script do the bypassing.</p>

<h3 id="frida---ssl-pinning-bypass-script">Frida - SSL Pinning Bypass Script</h3>
<p>The <code class="language-plaintext highlighter-rouge">ssl.js</code> I used above can be found <a href="https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/">here</a>. This script does the following:</p>
<ul>
  <li>Get <code class="language-plaintext highlighter-rouge">javax.net.ssl.TrustManagerFactory</code> and use it to create a TrustManager for the certificate at <code class="language-plaintext highlighter-rouge">/data/local/tmp/cert-der.crt</code><sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup></li>
  <li>Hook <code class="language-plaintext highlighter-rouge">SSLContext.init</code> method so that all calls to it are intercepted.</li>
  <li>When <code class="language-plaintext highlighter-rouge">SSLContext.init</code> is called, instead of the provided TrustManager, use our own that carries mitmproxy’s certificate.
Once injected, the script logs its actions in real-time, so you can confirm whether the bypass worked.</li>
</ul>

<p>And that’s it. At this point I am supposed to be able to see the traffic. However I noticed while I can see some, there is still some traffic which I cannot as evident by mitmproxy’s logs. Then I realized there was another SSL pinning layer I hadn’t addressed: Network Security Config.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In this post, I demonstrated a less known way of injecting Frida by modifying shared libraries, which avoids the common pitfalls of smali recompilation errors. Then we used a Frida script to hook <code class="language-plaintext highlighter-rouge">SSLContext.init</code> method. I have no practical defense solutions for this attack - Android does not seem to provide a way to see whether SSLContext is initialized with the intended trust manager or not. For a more general defense, detecting whether the gadget is present or not can be used, perhaps by listing the libraries.</p>

<p><strong>Disclaimer:</strong> This post is intended solely for educational and research purposes. The techniques described here should only be applied to applications you own or have explicit permission to analyze. Reverse engineering, modifying, or intercepting traffic of third-party apps without consent may violate their terms of service and applicable laws. I do not encourage or condone using these methods against third-party apps without permission.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>Sometimes this method silently fails and I haven’t figured out why yet. Injecting the Frida gadget into another library often works. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>This will be the mitmproxy’s certificate and we will push it to the device with <code class="language-plaintext highlighter-rouge">adb push mitmproxy.cert /data/local/tmp/cert-der.crt</code>. This is a directory all apps can access and that’s why we are using it. You can find mitmproxy certificates on your computer at <code class="language-plaintext highlighter-rouge">~/.mitmproxy</code> or your mobile that uses mitmproxy as proxy at <code class="language-plaintext highlighter-rouge">http://mitm.it</code>. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="android" /><category term="security" /><category term="ssl-pinning" /><category term="frida" /><summary type="html"><![CDATA[In this post, I will explain how to bypass SSL Pinning with SSLContext using Frida.]]></summary></entry></feed>